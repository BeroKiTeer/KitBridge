// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package stability

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type TestEnum int64

const (
	TestEnum_FIRST  TestEnum = 1
	TestEnum_SECOND TestEnum = 2
	TestEnum_THIRD  TestEnum = 3
	TestEnum_FOURTH TestEnum = 4
)

func (p TestEnum) String() string {
	switch p {
	case TestEnum_FIRST:
		return "FIRST"
	case TestEnum_SECOND:
		return "SECOND"
	case TestEnum_THIRD:
		return "THIRD"
	case TestEnum_FOURTH:
		return "FOURTH"
	}
	return "<UNSET>"
}

func TestEnumFromString(s string) (TestEnum, error) {
	switch s {
	case "FIRST":
		return TestEnum_FIRST, nil
	case "SECOND":
		return TestEnum_SECOND, nil
	case "THIRD":
		return TestEnum_THIRD, nil
	case "FOURTH":
		return TestEnum_FOURTH, nil
	}
	return TestEnum(0), fmt.Errorf("not a valid TestEnum string")
}

func TestEnumPtr(v TestEnum) *TestEnum { return &v }
func (p *TestEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TestEnum(result.Int64)
	return
}

func (p *TestEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type STRequest struct {
	Name       *string           `thrift:"Name,1,optional" frugal:"1,optional,string" json:"Name,omitempty"`
	On         *bool             `thrift:"on,2,optional" frugal:"2,optional,bool" json:"on,omitempty"`
	B          *int8             `thrift:"b,3,optional" frugal:"3,optional,byte" json:"b,omitempty"`
	Int16      int16             `thrift:"int16,4,optional" frugal:"4,optional,i16" json:"int16,omitempty"`
	Int32      *int32            `thrift:"int32,5,optional" frugal:"5,optional,i32" json:"int32,omitempty"`
	Int64      *int64            `thrift:"int64,6,optional" frugal:"6,optional,i64" json:"int64,omitempty"`
	D          *float64          `thrift:"d,7,optional" frugal:"7,optional,double" json:"d,omitempty"`
	Str        *string           `thrift:"str,8,optional" frugal:"8,optional,string" json:"str,omitempty"`
	Bin        []byte            `thrift:"bin,9,optional" frugal:"9,optional,binary" json:"bin,omitempty"`
	StringMap  map[string]string `thrift:"stringMap,10,optional" frugal:"10,optional,map<string:string>" json:"stringMap,omitempty"`
	StringList []string          `thrift:"stringList,11,optional" frugal:"11,optional,list<string>" json:"stringList,omitempty"`
	StringSet  []string          `thrift:"stringSet,12,optional" frugal:"12,optional,set<string>" json:"stringSet,omitempty"`
	E          *TestEnum         `thrift:"e,13,optional" frugal:"13,optional,TestEnum" json:"e,omitempty"`
	FlagMsg    *string           `thrift:"flagMsg,14,optional" frugal:"14,optional,string" json:"flagMsg,omitempty"`
	MockCost   *string           `thrift:"mockCost,15,optional" frugal:"15,optional,string" json:"mockCost,omitempty"`
	Framework  *string           `thrift:"framework,16,optional" frugal:"16,optional,string" query:"framework"`
	UserId     *string           `thrift:"userId,17,optional" frugal:"17,optional,string" header:"X-User-Id"`
}

func NewSTRequest() *STRequest {
	return &STRequest{

		Int16: 42,
	}
}

func (p *STRequest) InitDefault() {
	p.Int16 = 42
}

var STRequest_Name_DEFAULT string

func (p *STRequest) GetName() (v string) {
	if !p.IsSetName() {
		return STRequest_Name_DEFAULT
	}
	return *p.Name
}

var STRequest_On_DEFAULT bool

func (p *STRequest) GetOn() (v bool) {
	if !p.IsSetOn() {
		return STRequest_On_DEFAULT
	}
	return *p.On
}

var STRequest_B_DEFAULT int8

func (p *STRequest) GetB() (v int8) {
	if !p.IsSetB() {
		return STRequest_B_DEFAULT
	}
	return *p.B
}

var STRequest_Int16_DEFAULT int16 = 42

func (p *STRequest) GetInt16() (v int16) {
	if !p.IsSetInt16() {
		return STRequest_Int16_DEFAULT
	}
	return p.Int16
}

var STRequest_Int32_DEFAULT int32

func (p *STRequest) GetInt32() (v int32) {
	if !p.IsSetInt32() {
		return STRequest_Int32_DEFAULT
	}
	return *p.Int32
}

var STRequest_Int64_DEFAULT int64

func (p *STRequest) GetInt64() (v int64) {
	if !p.IsSetInt64() {
		return STRequest_Int64_DEFAULT
	}
	return *p.Int64
}

var STRequest_D_DEFAULT float64

func (p *STRequest) GetD() (v float64) {
	if !p.IsSetD() {
		return STRequest_D_DEFAULT
	}
	return *p.D
}

var STRequest_Str_DEFAULT string

func (p *STRequest) GetStr() (v string) {
	if !p.IsSetStr() {
		return STRequest_Str_DEFAULT
	}
	return *p.Str
}

var STRequest_Bin_DEFAULT []byte

func (p *STRequest) GetBin() (v []byte) {
	if !p.IsSetBin() {
		return STRequest_Bin_DEFAULT
	}
	return p.Bin
}

var STRequest_StringMap_DEFAULT map[string]string

func (p *STRequest) GetStringMap() (v map[string]string) {
	if !p.IsSetStringMap() {
		return STRequest_StringMap_DEFAULT
	}
	return p.StringMap
}

var STRequest_StringList_DEFAULT []string

func (p *STRequest) GetStringList() (v []string) {
	if !p.IsSetStringList() {
		return STRequest_StringList_DEFAULT
	}
	return p.StringList
}

var STRequest_StringSet_DEFAULT []string

func (p *STRequest) GetStringSet() (v []string) {
	if !p.IsSetStringSet() {
		return STRequest_StringSet_DEFAULT
	}
	return p.StringSet
}

var STRequest_E_DEFAULT TestEnum

func (p *STRequest) GetE() (v TestEnum) {
	if !p.IsSetE() {
		return STRequest_E_DEFAULT
	}
	return *p.E
}

var STRequest_FlagMsg_DEFAULT string

func (p *STRequest) GetFlagMsg() (v string) {
	if !p.IsSetFlagMsg() {
		return STRequest_FlagMsg_DEFAULT
	}
	return *p.FlagMsg
}

var STRequest_MockCost_DEFAULT string

func (p *STRequest) GetMockCost() (v string) {
	if !p.IsSetMockCost() {
		return STRequest_MockCost_DEFAULT
	}
	return *p.MockCost
}

var STRequest_Framework_DEFAULT string

func (p *STRequest) GetFramework() (v string) {
	if !p.IsSetFramework() {
		return STRequest_Framework_DEFAULT
	}
	return *p.Framework
}

var STRequest_UserId_DEFAULT string

func (p *STRequest) GetUserId() (v string) {
	if !p.IsSetUserId() {
		return STRequest_UserId_DEFAULT
	}
	return *p.UserId
}
func (p *STRequest) SetName(val *string) {
	p.Name = val
}
func (p *STRequest) SetOn(val *bool) {
	p.On = val
}
func (p *STRequest) SetB(val *int8) {
	p.B = val
}
func (p *STRequest) SetInt16(val int16) {
	p.Int16 = val
}
func (p *STRequest) SetInt32(val *int32) {
	p.Int32 = val
}
func (p *STRequest) SetInt64(val *int64) {
	p.Int64 = val
}
func (p *STRequest) SetD(val *float64) {
	p.D = val
}
func (p *STRequest) SetStr(val *string) {
	p.Str = val
}
func (p *STRequest) SetBin(val []byte) {
	p.Bin = val
}
func (p *STRequest) SetStringMap(val map[string]string) {
	p.StringMap = val
}
func (p *STRequest) SetStringList(val []string) {
	p.StringList = val
}
func (p *STRequest) SetStringSet(val []string) {
	p.StringSet = val
}
func (p *STRequest) SetE(val *TestEnum) {
	p.E = val
}
func (p *STRequest) SetFlagMsg(val *string) {
	p.FlagMsg = val
}
func (p *STRequest) SetMockCost(val *string) {
	p.MockCost = val
}
func (p *STRequest) SetFramework(val *string) {
	p.Framework = val
}
func (p *STRequest) SetUserId(val *string) {
	p.UserId = val
}

var fieldIDToName_STRequest = map[int16]string{
	1:  "Name",
	2:  "on",
	3:  "b",
	4:  "int16",
	5:  "int32",
	6:  "int64",
	7:  "d",
	8:  "str",
	9:  "bin",
	10: "stringMap",
	11: "stringList",
	12: "stringSet",
	13: "e",
	14: "flagMsg",
	15: "mockCost",
	16: "framework",
	17: "userId",
}

func (p *STRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *STRequest) IsSetOn() bool {
	return p.On != nil
}

func (p *STRequest) IsSetB() bool {
	return p.B != nil
}

func (p *STRequest) IsSetInt16() bool {
	return p.Int16 != STRequest_Int16_DEFAULT
}

func (p *STRequest) IsSetInt32() bool {
	return p.Int32 != nil
}

func (p *STRequest) IsSetInt64() bool {
	return p.Int64 != nil
}

func (p *STRequest) IsSetD() bool {
	return p.D != nil
}

func (p *STRequest) IsSetStr() bool {
	return p.Str != nil
}

func (p *STRequest) IsSetBin() bool {
	return p.Bin != nil
}

func (p *STRequest) IsSetStringMap() bool {
	return p.StringMap != nil
}

func (p *STRequest) IsSetStringList() bool {
	return p.StringList != nil
}

func (p *STRequest) IsSetStringSet() bool {
	return p.StringSet != nil
}

func (p *STRequest) IsSetE() bool {
	return p.E != nil
}

func (p *STRequest) IsSetFlagMsg() bool {
	return p.FlagMsg != nil
}

func (p *STRequest) IsSetMockCost() bool {
	return p.MockCost != nil
}

func (p *STRequest) IsSetFramework() bool {
	return p.Framework != nil
}

func (p *STRequest) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *STRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *STRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.On = _field
	return nil
}
func (p *STRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.B = _field
	return nil
}
func (p *STRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Int16 = _field
	return nil
}
func (p *STRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Int32 = _field
	return nil
}
func (p *STRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Int64 = _field
	return nil
}
func (p *STRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.D = _field
	return nil
}
func (p *STRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Str = _field
	return nil
}
func (p *STRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Bin = _field
	return nil
}
func (p *STRequest) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.StringMap = _field
	return nil
}
func (p *STRequest) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StringList = _field
	return nil
}
func (p *STRequest) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	p.StringSet = _field
	return nil
}
func (p *STRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *TestEnum
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TestEnum(v)
		_field = &tmp
	}
	p.E = _field
	return nil
}
func (p *STRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FlagMsg = _field
	return nil
}
func (p *STRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MockCost = _field
	return nil
}
func (p *STRequest) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Framework = _field
	return nil
}
func (p *STRequest) ReadField17(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserId = _field
	return nil
}

func (p *STRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("STRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOn() {
		if err = oprot.WriteFieldBegin("on", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.On); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *STRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetB() {
		if err = oprot.WriteFieldBegin("b", thrift.BYTE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.B); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *STRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt16() {
		if err = oprot.WriteFieldBegin("int16", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(p.Int16); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *STRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32() {
		if err = oprot.WriteFieldBegin("int32", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Int32); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *STRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt64() {
		if err = oprot.WriteFieldBegin("int64", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Int64); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *STRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetD() {
		if err = oprot.WriteFieldBegin("d", thrift.DOUBLE, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.D); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *STRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStr() {
		if err = oprot.WriteFieldBegin("str", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Str); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *STRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBin() {
		if err = oprot.WriteFieldBegin("bin", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Bin)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *STRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringMap() {
		if err = oprot.WriteFieldBegin("stringMap", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StringMap)); err != nil {
			return err
		}
		for k, v := range p.StringMap {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *STRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringList() {
		if err = oprot.WriteFieldBegin("stringList", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StringList)); err != nil {
			return err
		}
		for _, v := range p.StringList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *STRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringSet() {
		if err = oprot.WriteFieldBegin("stringSet", thrift.SET, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.StringSet)); err != nil {
			return err
		}
		for i := 0; i < len(p.StringSet); i++ {
			for j := i + 1; j < len(p.StringSet); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(p.StringSet[i], p.StringSet[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.StringSet[i]))
				}
			}
		}
		for _, v := range p.StringSet {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *STRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err = oprot.WriteFieldBegin("e", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.E)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *STRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetFlagMsg() {
		if err = oprot.WriteFieldBegin("flagMsg", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FlagMsg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *STRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockCost() {
		if err = oprot.WriteFieldBegin("mockCost", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MockCost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *STRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetFramework() {
		if err = oprot.WriteFieldBegin("framework", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Framework); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *STRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserId() {
		if err = oprot.WriteFieldBegin("userId", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *STRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STRequest(%+v)", *p)

}

func (p *STRequest) DeepEqual(ano *STRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.On) {
		return false
	}
	if !p.Field3DeepEqual(ano.B) {
		return false
	}
	if !p.Field4DeepEqual(ano.Int16) {
		return false
	}
	if !p.Field5DeepEqual(ano.Int32) {
		return false
	}
	if !p.Field6DeepEqual(ano.Int64) {
		return false
	}
	if !p.Field7DeepEqual(ano.D) {
		return false
	}
	if !p.Field8DeepEqual(ano.Str) {
		return false
	}
	if !p.Field9DeepEqual(ano.Bin) {
		return false
	}
	if !p.Field10DeepEqual(ano.StringMap) {
		return false
	}
	if !p.Field11DeepEqual(ano.StringList) {
		return false
	}
	if !p.Field12DeepEqual(ano.StringSet) {
		return false
	}
	if !p.Field13DeepEqual(ano.E) {
		return false
	}
	if !p.Field14DeepEqual(ano.FlagMsg) {
		return false
	}
	if !p.Field15DeepEqual(ano.MockCost) {
		return false
	}
	if !p.Field16DeepEqual(ano.Framework) {
		return false
	}
	if !p.Field17DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *STRequest) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field2DeepEqual(src *bool) bool {

	if p.On == src {
		return true
	} else if p.On == nil || src == nil {
		return false
	}
	if *p.On != *src {
		return false
	}
	return true
}
func (p *STRequest) Field3DeepEqual(src *int8) bool {

	if p.B == src {
		return true
	} else if p.B == nil || src == nil {
		return false
	}
	if *p.B != *src {
		return false
	}
	return true
}
func (p *STRequest) Field4DeepEqual(src int16) bool {

	if p.Int16 != src {
		return false
	}
	return true
}
func (p *STRequest) Field5DeepEqual(src *int32) bool {

	if p.Int32 == src {
		return true
	} else if p.Int32 == nil || src == nil {
		return false
	}
	if *p.Int32 != *src {
		return false
	}
	return true
}
func (p *STRequest) Field6DeepEqual(src *int64) bool {

	if p.Int64 == src {
		return true
	} else if p.Int64 == nil || src == nil {
		return false
	}
	if *p.Int64 != *src {
		return false
	}
	return true
}
func (p *STRequest) Field7DeepEqual(src *float64) bool {

	if p.D == src {
		return true
	} else if p.D == nil || src == nil {
		return false
	}
	if *p.D != *src {
		return false
	}
	return true
}
func (p *STRequest) Field8DeepEqual(src *string) bool {

	if p.Str == src {
		return true
	} else if p.Str == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Str, *src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field9DeepEqual(src []byte) bool {

	if bytes.Compare(p.Bin, src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field10DeepEqual(src map[string]string) bool {

	if len(p.StringMap) != len(src) {
		return false
	}
	for k, v := range p.StringMap {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STRequest) Field11DeepEqual(src []string) bool {

	if len(p.StringList) != len(src) {
		return false
	}
	for i, v := range p.StringList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STRequest) Field12DeepEqual(src []string) bool {

	if len(p.StringSet) != len(src) {
		return false
	}
	for i, v := range p.StringSet {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STRequest) Field13DeepEqual(src *TestEnum) bool {

	if p.E == src {
		return true
	} else if p.E == nil || src == nil {
		return false
	}
	if *p.E != *src {
		return false
	}
	return true
}
func (p *STRequest) Field14DeepEqual(src *string) bool {

	if p.FlagMsg == src {
		return true
	} else if p.FlagMsg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FlagMsg, *src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field15DeepEqual(src *string) bool {

	if p.MockCost == src {
		return true
	} else if p.MockCost == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MockCost, *src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field16DeepEqual(src *string) bool {

	if p.Framework == src {
		return true
	} else if p.Framework == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Framework, *src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field17DeepEqual(src *string) bool {

	if p.UserId == src {
		return true
	} else if p.UserId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserId, *src) != 0 {
		return false
	}
	return true
}

type STResponse struct {
	Str       *string           `thrift:"str,1,optional" frugal:"1,optional,string" json:"str,omitempty"`
	Mp        map[string]string `thrift:"mp,2,optional" frugal:"2,optional,map<string:string>" json:"mp,omitempty"`
	Name      *string           `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Framework *string           `thrift:"framework,4,optional" frugal:"4,optional,string" json:"framework,omitempty"`
}

func NewSTResponse() *STResponse {
	return &STResponse{}
}

func (p *STResponse) InitDefault() {
}

var STResponse_Str_DEFAULT string

func (p *STResponse) GetStr() (v string) {
	if !p.IsSetStr() {
		return STResponse_Str_DEFAULT
	}
	return *p.Str
}

var STResponse_Mp_DEFAULT map[string]string

func (p *STResponse) GetMp() (v map[string]string) {
	if !p.IsSetMp() {
		return STResponse_Mp_DEFAULT
	}
	return p.Mp
}

var STResponse_Name_DEFAULT string

func (p *STResponse) GetName() (v string) {
	if !p.IsSetName() {
		return STResponse_Name_DEFAULT
	}
	return *p.Name
}

var STResponse_Framework_DEFAULT string

func (p *STResponse) GetFramework() (v string) {
	if !p.IsSetFramework() {
		return STResponse_Framework_DEFAULT
	}
	return *p.Framework
}
func (p *STResponse) SetStr(val *string) {
	p.Str = val
}
func (p *STResponse) SetMp(val map[string]string) {
	p.Mp = val
}
func (p *STResponse) SetName(val *string) {
	p.Name = val
}
func (p *STResponse) SetFramework(val *string) {
	p.Framework = val
}

var fieldIDToName_STResponse = map[int16]string{
	1: "str",
	2: "mp",
	3: "name",
	4: "framework",
}

func (p *STResponse) IsSetStr() bool {
	return p.Str != nil
}

func (p *STResponse) IsSetMp() bool {
	return p.Mp != nil
}

func (p *STResponse) IsSetName() bool {
	return p.Name != nil
}

func (p *STResponse) IsSetFramework() bool {
	return p.Framework != nil
}

func (p *STResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Str = _field
	return nil
}
func (p *STResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Mp = _field
	return nil
}
func (p *STResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *STResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Framework = _field
	return nil
}

func (p *STResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("STResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStr() {
		if err = oprot.WriteFieldBegin("str", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Str); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMp() {
		if err = oprot.WriteFieldBegin("mp", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Mp)); err != nil {
			return err
		}
		for k, v := range p.Mp {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *STResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *STResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFramework() {
		if err = oprot.WriteFieldBegin("framework", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Framework); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *STResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STResponse(%+v)", *p)

}

func (p *STResponse) DeepEqual(ano *STResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Str) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mp) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Framework) {
		return false
	}
	return true
}

func (p *STResponse) Field1DeepEqual(src *string) bool {

	if p.Str == src {
		return true
	} else if p.Str == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Str, *src) != 0 {
		return false
	}
	return true
}
func (p *STResponse) Field2DeepEqual(src map[string]string) bool {

	if len(p.Mp) != len(src) {
		return false
	}
	for k, v := range p.Mp {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STResponse) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *STResponse) Field4DeepEqual(src *string) bool {

	if p.Framework == src {
		return true
	} else if p.Framework == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Framework, *src) != 0 {
		return false
	}
	return true
}

type STService interface {
	TestSTReq(ctx context.Context, req *STRequest) (r *STResponse, err error)
}

type STServiceTestSTReqArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestSTReqArgs() *STServiceTestSTReqArgs {
	return &STServiceTestSTReqArgs{}
}

func (p *STServiceTestSTReqArgs) InitDefault() {
}

var STServiceTestSTReqArgs_Req_DEFAULT *STRequest

func (p *STServiceTestSTReqArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestSTReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestSTReqArgs) SetReq(val *STRequest) {
	p.Req = val
}

var fieldIDToName_STServiceTestSTReqArgs = map[int16]string{
	1: "req",
}

func (p *STServiceTestSTReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestSTReqArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestSTReqArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestSTReqArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSTRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *STServiceTestSTReqArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("testSTReq_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestSTReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceTestSTReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqArgs(%+v)", *p)

}

func (p *STServiceTestSTReqArgs) DeepEqual(ano *STServiceTestSTReqArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *STServiceTestSTReqArgs) Field1DeepEqual(src *STRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestSTReqResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceTestSTReqResult() *STServiceTestSTReqResult {
	return &STServiceTestSTReqResult{}
}

func (p *STServiceTestSTReqResult) InitDefault() {
}

var STServiceTestSTReqResult_Success_DEFAULT *STResponse

func (p *STServiceTestSTReqResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestSTReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestSTReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

var fieldIDToName_STServiceTestSTReqResult = map[int16]string{
	0: "success",
}

func (p *STServiceTestSTReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestSTReqResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestSTReqResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestSTReqResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSTResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *STServiceTestSTReqResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("testSTReq_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestSTReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *STServiceTestSTReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqResult(%+v)", *p)

}

func (p *STServiceTestSTReqResult) DeepEqual(ano *STServiceTestSTReqResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *STServiceTestSTReqResult) Field0DeepEqual(src *STResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
